{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3","program":"C:\\Users\\hamza\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","strsim","C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=c081d5b5d3158c8f","-C","extra-filename=-c081d5b5d3158c8f","--out-dir","d:\\Cours\\4_IABD\\RUST\\Projet_Rust\\target\\rls\\debug\\deps","-L","dependency=d:\\Cours\\4_IABD\\RUST\\Projet_Rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\hamza\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Cours\\4_IABD\\RUST\\Projet_Rust\\target\\rls\\debug\\deps\\libstrsim-c081d5b5d3158c8f.rmeta"},"prelude":{"crate_id":{"name":"strsim","disambiguator":[9786810210581630664,5680839235690887764]},"crate_root":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src","external_crates":[{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}}],"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":0,"byte_end":24786,"line_start":1,"line_end":873,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":0,"byte_end":24786,"line_start":1,"line_end":873,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":76},{"krate":0,"index":81},{"krate":0,"index":79},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" This library implements string similarity metrics.\n","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":56,"byte_end":79,"line_start":3,"line_end":3,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":316,"byte_end":335,"line_start":15,"line_end":15,"column_start":5,"column_end":24},"name":"DifferentLengthArgs","qualname":"::StrSimError::DifferentLengthArgs","value":"StrSimError::DifferentLengthArgs","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":298,"byte_end":309,"line_start":14,"line_end":14,"column_start":10,"column_end":21},"name":"StrSimError","qualname":"::StrSimError","value":"StrSimError::{DifferentLengthArgs}","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":650,"byte_end":663,"line_start":30,"line_end":30,"column_start":10,"column_end":23},"name":"HammingResult","qualname":"::HammingResult","value":"Result<usize, StrSimError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":851,"byte_end":866,"line_start":34,"line_end":34,"column_start":8,"column_end":23},"name":"generic_hamming","qualname":"::generic_hamming","value":"fn <Iter1, Iter2, Elem1, Elem2> (a: Iter1, b: Iter2) -> HammingResult","parent":null,"children":[],"decl_id":null,"docs":" Calculates the number of positions in the two sequences where the elements\n differ. Returns an error if the sequences have different lengths.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":1743,"byte_end":1750,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"hamming","qualname":"::hamming","value":"fn (a: &str, b: &str) -> HammingResult","parent":null,"children":[],"decl_id":null,"docs":" Calculates the number of positions in the two strings where the characters\n differ. Returns an error if the strings have different lengths.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":1979,"byte_end":1991,"line_start":65,"line_end":65,"column_start":8,"column_end":20},"name":"generic_jaro","qualname":"::generic_jaro","value":"fn <'a, 'b, Iter1, Iter2, Elem1, Elem2> (a: &'a Iter1, b: &'b Iter2) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro similarity between two sequences. The returned value\n is between 0.0 and 1.0 (higher value means more similar).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":4379,"byte_end":4383,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"jaro","qualname":"::jaro","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Jaro similarity between two strings. The returned value\n is between 0.0 and 1.0 (higher value means more similar).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":4548,"byte_end":4568,"line_start":158,"line_end":158,"column_start":8,"column_end":28},"name":"generic_jaro_winkler","qualname":"::generic_jaro_winkler","value":"fn <'a, 'b, Iter1, Iter2, Elem1, Elem2> (a: &'a Iter1, b: &'b Iter2) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Like Jaro but gives a boost to sequences that have a common prefix.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":5456,"byte_end":5468,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"jaro_winkler","qualname":"::jaro_winkler","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Like Jaro but gives a boost to strings that have a common prefix.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":5826,"byte_end":5845,"line_start":200,"line_end":200,"column_start":8,"column_end":27},"name":"generic_levenshtein","qualname":"::generic_levenshtein","value":"fn <'a, 'b, Iter1, Iter2, Elem1, Elem2> (a: &'a Iter1, b: &'b Iter2) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the minimum number of insertions, deletions, and substitutions\n required to change one sequence into the other.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":6919,"byte_end":6930,"line_start":236,"line_end":236,"column_start":8,"column_end":19},"name":"levenshtein","qualname":"::levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the minimum number of insertions, deletions, and substitutions\n required to change one string into the other.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":7607,"byte_end":7629,"line_start":252,"line_end":252,"column_start":8,"column_end":30},"name":"normalized_levenshtein","qualname":"::normalized_levenshtein","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n 1.0 (inclusive), where 1.0 means the strings are the same.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":8025,"byte_end":8037,"line_start":267,"line_end":267,"column_start":8,"column_end":20},"name":"osa_distance","qualname":"::osa_distance","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like Levenshtein but allows for adjacent transpositions. Each substring can\n only be edited once.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":10029,"byte_end":10056,"line_start":327,"line_end":327,"column_start":8,"column_end":35},"name":"generic_damerau_levenshtein","qualname":"::generic_damerau_levenshtein","value":"fn <Elem> (a_elems: &[Elem], b_elems: &[Elem]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like optimal string alignment, but substrings can be edited an unlimited\n number of times, and the triangle inequality holds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":12062,"byte_end":12081,"line_start":390,"line_end":390,"column_start":8,"column_end":27},"name":"damerau_levenshtein","qualname":"::damerau_levenshtein","value":"fn (a: &str, b: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Like optimal string alignment, but substrings can be edited an unlimited\n number of times, and the triangle inequality holds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":12909,"byte_end":12939,"line_start":407,"line_end":407,"column_start":8,"column_end":38},"name":"normalized_damerau_levenshtein","qualname":"::normalized_damerau_levenshtein","value":"fn (a: &str, b: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Calculates a normalized score of the Damerau–Levenshtein algorithm between\n 0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":357,"byte_end":368,"line_start":18,"line_end":18,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":625,"byte_end":636,"line_start":28,"line_end":28,"column_start":16,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":357,"byte_end":368,"line_start":18,"line_end":18,"column_start":18,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":76},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\strsim-0.9.3\\src\\lib.rs","byte_start":625,"byte_end":636,"line_start":28,"line_end":28,"column_start":16,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":76},"to":{"krate":1,"index":1623}}]}